<?php

namespace App\Entity;

use ApiPlatform\Metadata as API;
use App\Library\Economy\Monetizable;
use App\Repository\AccountingIncomingRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;

/**
 * Accounting Incomings represent a receipt of funds.
 * Incomings are generated by the Accounting when targeted by a Transaction,
 * and spent by the Accounting when asked to originate a Transaction.
 */
#[ORM\Entity(repositoryClass: AccountingIncomingRepository::class)]
#[API\ApiResource(
    uriTemplate: '/accountings/{account}/incomings/{id}',
    uriVariables: [
        'account' => new API\Link(fromClass: Accounting::class, fromProperty: 'id'),
        'id' => new API\Link(fromClass: AccountingIncoming::class)
    ],
    operations: [new API\Get()]
)]
class AccountingIncoming extends Monetizable
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    /**
     * The available amount of this Incoming.\
     * Expressed in the minor unit of the currency (cents, pennies, etc)
     */
    #[ORM\Column]
    private int $amount = 0;

    /**
     * Originally received amount of the Incoming.\
     * Expressed in the minor unit of the currency (cents, pennies, etc)
     */
    #[ORM\Column]
    private ?int $amountOriginal = 0;

    /**
     * 3-letter ISO 4217 currency code. Same as parent Accounting.
     */
    #[ORM\Column(length: 3)]
    private string $currency = "";

    #[ORM\ManyToOne(inversedBy: 'incoming')]
    #[ORM\JoinColumn(nullable: false)]
    private ?Accounting $accounting = null;

    /**
     * The received Transaction that generated this Incoming.
     */
    #[ORM\OneToOne(cascade: ['persist', 'remove'])]
    #[ORM\JoinColumn(nullable: false)]
    private ?Transaction $transaction = null;

    /**
     * When receiving Transactions in a different currency an exchange operation will be performed.\
     * Original amount, currency and exchange rate data can be referenced here.
     */
    #[ORM\Embedded(class: TransactionExchange::class)]
    private ?object $transactionExchange = null;

    /**
     * A list of Accounting Fundings detailing the expenditures financed by this Incoming movement.
     */
    #[ORM\OneToMany(mappedBy: 'incoming', targetEntity: AccountingFunding::class)]
    private Collection $spentOn;

    public function __construct()
    {
        $this->spentOn = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getAmount(): int
    {
        return $this->amount;
    }

    public function setAmount(int $amount): static
    {
        $this->amount = $amount;

        return $this;
    }

    public function getAmountOriginal(): int
    {
        return $this->amountOriginal;
    }

    public function setAmountOriginal(int $amountOriginal): static
    {
        $this->amountOriginal = $amountOriginal;

        return $this;
    }

    public function getCurrency(): string
    {
        return $this->currency;
    }

    public function setCurrency(string $currency): static
    {
        $this->currency = $currency;

        return $this;
    }

    public function getAccounting(): ?Accounting
    {
        return $this->accounting;
    }

    public function setAccounting(?Accounting $accounting): static
    {
        $this->accounting = $accounting;

        return $this;
    }

    public function getTransaction(): ?Transaction
    {
        return $this->transaction;
    }

    public function setTransaction(Transaction $transaction): static
    {
        $this->transaction = $transaction;

        return $this;
    }

    public function getTransactionExchange(): ?object
    {
        return $this->transactionExchange;
    }

    public function setTransactionExchange(?object $transactionExchange): static
    {
        $this->transactionExchange = $transactionExchange;

        return $this;
    }

    /**
     * @return Collection<int, AccountingFunding>
     */
    public function getSpentOn(): Collection
    {
        return $this->spentOn;
    }

    public function addSpentOn(AccountingFunding $spentOn): static
    {
        if (!$this->spentOn->contains($spentOn)) {
            $this->spentOn->add($spentOn);
            $spentOn->setIncoming($this);
        }

        return $this;
    }

    public function removeSpentOn(AccountingFunding $spentOn): static
    {
        if ($this->spentOn->removeElement($spentOn)) {
            // set the owning side to null (unless already changed)
            if ($spentOn->getIncoming() === $this) {
                $spentOn->setIncoming(null);
            }
        }

        return $this;
    }
}
